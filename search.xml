<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>论文阅读：AdderNet：Do We Really Need Multiplications in Deep Learning？</title>
    <url>/2020/04/01/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9AAdderNet%EF%BC%9ADo%20We%20Really%20Need%20Multiplications%20in%20Deep%20Learning?/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>如今的卷积神经网络(CNN)的卷积操作中包含了大量的乘法，虽然已经有很多轻量级的网络(如MobileNet)提出来，但是乘法的开销依旧是难以忽视的，要在轻量级设备本地进行深度学习应用，需要使得计算速度进一步加快，于是本论文提出了使用加法操作代替乘法操作，本论文的作者是<strong>Hanting Chen,Yunhe Wang,Chunjing Xu,Boxin Shi,Chao Xu,Qi Tian,Chang Xu</strong>。是CVPR2020上华为诺亚实验室和北京大学合作的一篇文章。<br>论文指出传统卷积操作其实就是使用的一种互相关操作来衡量输入特征和卷积核之间的相似度，而这个互相关的操作就引入了很多乘法操作，因此文章提出另一种方式来衡量输入特征和卷积核之间的相似度，这个方法就是<strong>L1距离</strong>。</p>
<p><a href="https://arxiv.org/pdf/1912.13200.pdf" target="_blank" rel="noopener">原论文</a></p>
<h1 id="没有乘法的网络"><a href="#没有乘法的网络" class="headerlink" title="没有乘法的网络"></a>没有乘法的网络</h1><p>假设$F \in R^{d \times d \times c_in \times c_{out}}$，F是网络中间某层的过滤器，过滤器大小为d，输入有$c_{in}$个通道，输出有$c_{out}$个通道。输入的特征定义为$X \in R^{H \times W \times c_{in}}$，其中H和W对应着特征的高和宽。则输出的Y有以下式子$$Y(m,n,t) = \sum_{i=0}^n \sum_{j=0}^d \sum_{k=0}^{c_{in}}S(X(m+i,n+j,k),F(i,j,k,t))$$其中S是相似度函数。如果$S(x,y) = x \times y$,那么这个公式就变成了传统卷积神经网络中的卷积操作。</p>
<h3 id="加法网络"><a href="#加法网络" class="headerlink" title="加法网络"></a>加法网络</h3><p>前面提到过要用L1距离代替互相关操作，那么上述公式就变成$$Y(m,n,t) = - \sum_{i=0}^n \sum_{j=0}^d \sum_{k=0}^{c_{in}}|X(m+i,n+j,k)-F(i,j,k,t)|$$这里作者提到了这样的操作得出的结果都是负值，但是传统卷积网络得到的输出值则是有正有负，但是在输出层后紧接着一个BN层我们可以让输出分布在一个合理的范围。</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>在传统卷积网络中Y关于F的反向传播公式如下$$\frac{\partial Y(m,n,t)}{\partial F(i,j,k,t) } = X(m+i,n+j,k)$$在加法网络中，使用了L1距离的反向传播公式如下$$\frac{\partial Y(m,n,t)}{\partial F(i,j,k,t)} = sgn(X(m+i,n+j,k) - F(i,j,k,t))$$文章中说L1距离反向传播的这种signSGD并不能沿着最好的方向下降，有时候还会选择比较糟糕的方向，因此论文中把反向传播公式变成L2距离的反向传播，叫做全精度梯度$$\frac{\partial Y(m,n,t)}{\partial F(i,j,k,t) } = X(m+i,n+j,k) - F(i,j,k,t)$$同时再考虑Y对X的导数，根据链式法则，$\frac{\partial Y}{\partial F_i }$只跟$F_i$自己有关，而$\frac{\partial Y}{\partial X_i }$的梯度值还会影响前一层的值，作者指出这种全精度梯度传播会产生梯度爆炸，于是使用一个HT函数把梯度截断在[-1,1]里，既$$\frac{\partial Y(m,n,t)}{\partial X(m+i,n+j,k) } = HT(F(i,j,k,t) - F(i,j,k,t))$$其中HT代表着HardTanh函数$$HT(x) = x\quad if -1&lt;x&lt;1$$$$HT(x) = 1 \quad x&gt;1$$$$HT(x)=-1\quad x&lt;-1$$</p>
<h2 id="自适应学习率"><a href="#自适应学习率" class="headerlink" title="自适应学习率"></a>自适应学习率</h2><p>在加法网络中，每一层输出后面也跟着一层BN层，虽然BN层带来了一些乘法操作，但是这些操作的量级比起经典卷积网络的乘法数量就可以忽略不计。给定一个mini-batch B={x1,…,xm}，BN层做了如下操作$$y = \gamma \frac{x-\mu_B}{\sigma_B}+\beta$$$$\mu=\frac{1}{m}\sum_ix_i$$$$\sigma_B^2=\frac{1}{m}\sum_i(x_i-\mu_B)^2$$该层主要就是处理这个mini-batch的数据集使它均值等于0，方差等于1。那么加上了BN层后l关于x的偏导为$$\frac{\partial l}{\partial x_i}=\sum_{j=1}^m\frac{\gamma}{m^2\sigma_B}{\frac{\partial l}{\partial y_i}-\frac{\partial l}{\partial y_j}[1+\frac{(x_i-x_j)(x_j-\mu_B)}{\sigma_B}]}$$根据链式法则，每一层的权重的梯度都受到上一层$x_i$梯度的影响，根据上述公式$x_i$的梯度很大程度取决于$\sigma_B$，即BN处理前$x_i$的标准差。论文中给出了粗略的输出Y的方差计算，传统神经网络输出方差为$$Var[Y_{CNN}]=\sum_{i=0}^d \sum_{j=0}^d \sum_{k=0}^{c_{in}}Var[X \times F]=d^2c_{in}Var[X]Var[F]$$而在加法网络中方差变为$$Var[Y_{CNN}]=\sum_{i=0}^d \sum_{j=0}^d \sum_{k=0}^{c_{in}}Var[|X-F|]=(1-\frac{2}{\pi})d^2c_{in}(Var[X]+Var[F])$$根据以往经验，$Var[F]$在普通CNN网络中非常的小，只有$10^{-3}$或者$10^{-4}$。因此传统CNN中$Var[Y]$方差要比加法网络中$Var[Y]$大很多。之前提到权重梯度取决于标准差，因此用了BN层的加法网络中权重梯度会很小，下表是个对比<img src="/" class="lazyload" data-src="https://pic.downk.cc/item/5e858168504f4bcb04cb2208.png"  alt="">图片除显示出梯度较小之外，还展示出有些层可能值不在一个量级，因此使用全局统一的学习率变得不再合适，所以论文中使用了一种自适应学习率的方法，使得学习率在每一层都不一样。它的公式计算表示为$$\Delta F_l = \gamma \times \alpha_l \times \Delta L(F_l)$$其中$\gamma$是全局学习率，而$\alpha_l$则是每层的学习率。$$\alpha_l = \frac{\eta \sqrt k}{\parallel \Delta L(F_l) \parallel _ 2}$$k代表$F_l$中元素的个数，$\eta$则是一个超参数。有了这样的学习率调整，在每层中都能自动适应当层的情况进行学习率的调整。</p>
<h2 id="算法流程描述"><a href="#算法流程描述" class="headerlink" title="算法流程描述"></a>算法流程描述</h2><p>上面就是本篇论文提出的所有新东西与新设计，文章中也给出了加法网络前向和后向传播的流程描述<img src="/" class="lazyload" data-src="https://pic.downk.cc/item/5e858a4f504f4bcb04d21d13.png"  alt=""></p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>实验数据和结果对比见<a href="https://arxiv.org/pdf/1912.13200.pdf" target="_blank" rel="noopener">原论文</a></p>
<h1 id="一些想法"><a href="#一些想法" class="headerlink" title="一些想法"></a>一些想法</h1><ol>
<li><p>本论文还只是初步提出了一个idea以及初步进行了实验，实验内容也并不复杂，这个网络的稳定性和各个方面的性能有待进一步研究，但不失为一个非常好的思路。</p>
</li>
<li><p>本论文的目的就是打造一个计算更快的网络，但是实验结果没有给出这个网络所耗费的时间。</p>
</li>
<li><p>论文中有些公式的提出并没有给出特别明确的理由（也许我自己我没理解），如L1距离的公式为什么前面要带负号，以及自适应学习率的公式为什么是那样。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>论文</category>
        <category>2020年</category>
      </categories>
      <tags>
        <tag>论文</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读：DCGAN网络</title>
    <url>/2020/04/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ADCGAN/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本篇文论文所介绍的DCGAN网络就是在GAN网络的基础上进行改进并引入了图像的卷积操作，即把CNN与GAN网络很好的结合起来，使得网络的生成器最终可以从随机噪声中生成一张以假乱真的图片。该论文作者<strong>Alec Radford &amp; Luke Metz</strong>。作者在文章中并没有对DCGAN网络的具体原理进行公式性的阐述，而是直接呈现了作者自己设计的网络架构和一些参数调整的细节。相关摘要，介绍和相关工作可以直接查看<a href="https://arxiv.org/pdf/1511.06434.pdf" target="_blank" rel="noopener">原论文</a></p>
<h1 id="方法和模型架构"><a href="#方法和模型架构" class="headerlink" title="方法和模型架构"></a>方法和模型架构</h1><p>具体来说本篇论文就是把GAN原始论文中的生成器G和判别器D用两个CNN网络来替代。对于这两个CNN网络，做出了一些调整。</p>
<p>首先就是使用了一个全卷积网络，用步长卷积(即步长大于1的卷积)来替换掉池化层，这样的目的在于希望网络可以自己学习到下采样的方式，相比于固定的池化层更加灵活。这样的方法同时运用在生成器和判别器中（在生成器中主要是要使用转职卷积进行上采样）。</p>
<p>第二就是当时的趋势是取消全连接层，最近的做法是使用全局平均池化层代替全连接层，但是这样做虽然提高了稳定性却降低了收敛速度。对于生成器本，GAN的输入是采用均匀分布初始化的一维噪声，之后还是会使用一个全连接层，得到的结果reshape成一个4D张量，就可以进行一层层的卷积操作。对于判别器，最后的卷积层则是先flatten然后再送入sigmoid分类器进行输出。</p>
<p>第三就是每层中都加入Batch Normalization层，这有助于模型的稳定和收敛，也有助防止过拟合。但是通过实验表明，对网络所有层使用BN层会使得样本不稳定，所以只对生成器的输出和判别器的输入层加入BN层。</p>
<p>生成器中，除了输出层用Tanh，其余层都是用ReLU。而对于判别器，使用LeakyReLU则要更好点。</p>
<p>综上所述，本网络的一些改进的点在于：</p>
<ul>
<li>将所有的池化层都用步长卷积（判别器）和转置步长卷积（生成器）代替。</li>
<li>在生成器和判别器中加入BN层。</li>
<li>对于深层网络架构去除全连接层。</li>
<li>对生成器的除了输出层的其它层使用ReLU，输出层用Tanh。</li>
<li>对判别器所有曾都是用LeakyReLU。</li>
</ul>
<h1 id="训练细节"><a href="#训练细节" class="headerlink" title="训练细节"></a>训练细节</h1><p>接下来作者提及了一些他训练模型中运用的一些参数调整。</p>
<ul>
<li>首先图片并没有进行一些预处理，只是利用tanh将它的输出映射在了[-1,1]的区间。</li>
<li>使用mini-batch SGD，batch大小为128。</li>
<li>所有的参数都采用0均值,标准差为0.02的初始化方式。</li>
<li>LeakyReLU的斜率设置为0.2。</li>
<li>使用Adam优化器，由于推荐学习率0.001过大，作者修改到了使用0.0002。此外将$\beta_1$的值从默认的0.9调整到了0.5保证模型的稳定。</li>
</ul>
<p>下图是作者给出的生成器的架构图。<img src="/" class="lazyload" data-src="https://pic.downk.cc/item/5e9066a4504f4bcb04a9edca.png"  alt="">第一层就是一个均匀分布的一维噪声，然后经过一层后映射成$4<em>4</em>1024$的特征图。其中的上采样过程使用了转置卷积，最后的输出就是本次模型生成的图片大小，接下来它将会交给判别器进行判别。</p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>DCGAN的网络实现在github上已经有很多现成的实现了，这里使用了tensorflow官网教程中关于DCGAN的实现。在具体应用中可以发现，其实许多的参数和网络结构设置都是可以根据实际实验需要进行调整的，像在tensorflow的官网教程中，对生成器和判别器中激活函数都有些许调整并且使用了全连接层以及加入了dropout层。</p>
<p>下面就是生成器的代码架构：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_generator_model</span><span class="params">()</span>:</span></span><br><span class="line">    model = tf.keras.Sequential()</span><br><span class="line">    model.add(layers.Dense(<span class="number">7</span>*<span class="number">7</span>*<span class="number">256</span>, use_bias=<span class="literal">False</span>, input_shape=(<span class="number">100</span>,)))</span><br><span class="line">    model.add(layers.BatchNormalization())</span><br><span class="line">    model.add(layers.LeakyReLU())</span><br><span class="line"></span><br><span class="line">    model.add(layers.Reshape((<span class="number">7</span>, <span class="number">7</span>, <span class="number">256</span>)))</span><br><span class="line">    <span class="keyword">assert</span> model.output_shape == (<span class="literal">None</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">256</span>) <span class="comment"># 注意：batch size 没有限制</span></span><br><span class="line"></span><br><span class="line">    model.add(layers.Conv2DTranspose(<span class="number">128</span>, (<span class="number">5</span>, <span class="number">5</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">'same'</span>, use_bias=<span class="literal">False</span>))</span><br><span class="line">    <span class="keyword">assert</span> model.output_shape == (<span class="literal">None</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">128</span>)</span><br><span class="line">    model.add(layers.BatchNormalization())</span><br><span class="line">    model.add(layers.LeakyReLU())</span><br><span class="line"></span><br><span class="line">    model.add(layers.Conv2DTranspose(<span class="number">64</span>, (<span class="number">5</span>, <span class="number">5</span>), strides=(<span class="number">2</span>, <span class="number">2</span>), padding=<span class="string">'same'</span>, use_bias=<span class="literal">False</span>))</span><br><span class="line">    <span class="keyword">assert</span> model.output_shape == (<span class="literal">None</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">64</span>)</span><br><span class="line">    model.add(layers.BatchNormalization())</span><br><span class="line">    model.add(layers.LeakyReLU())</span><br><span class="line"></span><br><span class="line">    model.add(layers.Conv2DTranspose(<span class="number">1</span>, (<span class="number">5</span>, <span class="number">5</span>), strides=(<span class="number">2</span>, <span class="number">2</span>), padding=<span class="string">'same'</span>, use_bias=<span class="literal">False</span>, activation=<span class="string">'tanh'</span>))</span><br><span class="line">    <span class="keyword">assert</span> model.output_shape == (<span class="literal">None</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure>

<p>可以看到第一层用了全连接，并且中间层也并没有使用原论文中所说的ReLU而是也用了LeakyReLU。</p>
<p>而判别器的代码则是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_discriminator_model</span><span class="params">()</span>:</span></span><br><span class="line">    model = tf.keras.Sequential()</span><br><span class="line">    model.add(layers.Conv2D(<span class="number">64</span>, (<span class="number">5</span>, <span class="number">5</span>), strides=(<span class="number">2</span>, <span class="number">2</span>), padding=<span class="string">'same'</span>,</span><br><span class="line">                                     input_shape=[<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>]))</span><br><span class="line">    model.add(layers.LeakyReLU())</span><br><span class="line">    model.add(layers.Dropout(<span class="number">0.3</span>))</span><br><span class="line"></span><br><span class="line">    model.add(layers.Conv2D(<span class="number">128</span>, (<span class="number">5</span>, <span class="number">5</span>), strides=(<span class="number">2</span>, <span class="number">2</span>), padding=<span class="string">'same'</span>))</span><br><span class="line">    model.add(layers.LeakyReLU())</span><br><span class="line">    model.add(layers.Dropout(<span class="number">0.3</span>))</span><br><span class="line"></span><br><span class="line">    model.add(layers.Flatten())</span><br><span class="line">    model.add(layers.Dense(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure>

<p>加入了dropout层。</p>
<p>损失函数的定义也是根据原始GAN网络来定义的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">discriminator_loss</span><span class="params">(real_output, fake_output)</span>:</span></span><br><span class="line">    real_loss = cross_entropy(tf.ones_like(real_output), real_output)</span><br><span class="line">    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)</span><br><span class="line">    total_loss = real_loss + fake_loss</span><br><span class="line">    <span class="keyword">return</span> total_loss</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_loss</span><span class="params">(fake_output)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> cross_entropy(tf.ones_like(fake_output), fake_output)</span><br></pre></td></tr></table></figure>

<p>具体的教程可以去<a href="https://www.tensorflow.org/tutorials/generative/dcgan" target="_blank" rel="noopener">tensorflow官网教程</a>进行查阅，它实现了一个自动生成手写数据集的网络，在这个框架的基础上进行改动也可以生成各种其它尺寸的不同图片。我对网络结构修改后在动漫人物头像的数据集上训练后，网络便能生成动漫人物头像，大概训练了200步，可以看到还是有不少瑕疵。</p>
<p><img src="/" class="lazyload" data-src="https://pic.downk.cc/item/5e906f11504f4bcb04b1a9e6.png"  alt=""></p>
<p>头像数据集的获取可以点击查看<a href="https://www.cnblogs.com/baiting/p/8314936.html" target="_blank" rel="noopener">这篇博客</a></p>
<p>实际实验中，使用反卷积的时候，当步长不能整除卷积核大小的时候，上采样出来的图像会很容易出现棋盘效应，棋盘效应的直观原因可以参考<a href="https://www.cnblogs.com/hellcat/p/9707204.html" target="_blank" rel="noopener">这里</a>，应该说转置卷积不可避免的就会带来棋盘效应，就算步长能整除卷积核大小，也可能因为权重分学习的不均匀导致棋盘效应。所以推荐的做法是使用插值先进行上采样再用same卷积也能达到同样的效果且没有棋盘效应。</p>
<p>该篇论文给出CNN和GAN结合的做法并进行了改进，在实际使用中，也可以根据实际不同的需求进行调整以达到最优的情况。</p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>论文</category>
        <category>2016年</category>
      </categories>
      <tags>
        <tag>论文</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读：Generative Adversarial Nets</title>
    <url>/2020/04/03/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9AGenerative%20Adversarial%20Nets/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这篇论文是生成对抗(GAN)网络的奠基之作，它提出了一种全新生成的思想，时至今日都是深度学习中热门的一种模型。它的作者是<strong>Ian J.Goodfellow, Jean Pouget-Abadie*, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, Yoshua Bengio</strong></p>
<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>GAN网络其实就是两个网络之间的博弈游戏，即网络和网络之间的对抗，其中一个网络G从随机噪声生成样本，而网络D则从来评判一个样本是真实数据的概率，即判别它是来自真实数据集的可能性大还是来自G生成的可能性大。</p>
<p>这样就形成了一个两个网络之间的博弈过程，那么理想状态下，G希望生成能以假乱真的样本，而D希望能有足够的能力分辨样本是生成的还是真实数据。这样的博弈最优的情况就是D(G(z))=0.5，这样就达到了一最优的状态。这样就说明D已经比较难以判断G生成的图片是否是真的。这样这个模型中的G网络就可以用来生成数据样本了，目的就达到了。用数学公式描述如下$$\underset Gmin\underset Dmax V(D,G)=E_{x_\tilde{} p_{data}}(x)[logD(x)]+E_{z\tilde{} p_z(z)}[log(1-D(G(z)))]$$我们可以简单解释下这个公式:</p>
<ul>
<li>首先x表示的就是真实样本，z表示随机生成的原始噪声，G(z)表示我们生成网络从噪声当中生成的图片，D(x)表示判别x是真实数据的概率（如果x就是真实的，那么我们希望D(x)接近1，反之希望接近0）。</li>
<li>G网络：它希望自己生成的样本越真实越好，即希望D(G(z))越大越好，那么上述公式的第二部分就会变小，整个式子V(D,G)也跟着变小。所以可以看到式子前面的符号为$\underset G min$。</li>
<li>D网络：它则是希望自己有足够强的能力能够有能力分辨真假样本，即D(x)应该大，D(G(z))应该小。那么log(D(x))会变大，log(1-D(G(z)))会变大，整个式子V(D,G)变大，所以式子前面符号为$\underset Dmax$</li>
</ul>
<p>也可以把上面的式子拆成两部分，一部分是优化D的一部分是优化G的，则对于G网络$$min\log(1-D(G(z)))$$对于D网络$$max\ (logD(x)+log(1-D(G(z))))$$这两个部分交替优化最终达到平衡。作者指出在每遍循环中同时优化D和G有可能导致过拟合，所以建议在k轮的D优化后再优化一遍G。</p>
<p>同时对于上述的对G网络的优化，由于刚开始G网络还很弱，因此log(1-D(G(z)))会非常小造成溢出，则算法会变得不稳定。作者建议把最小化log(1-D(G(z)))改为最大化log(D(G(z)))会使得算法在刚开始G网络还不是很强时更加稳定（但作者在给出的算法流程中并没有使用）。</p>
<h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><p><img src="/" class="lazyload" data-src="https://pic.downk.cc/item/5e8842a5504f4bcb04aa698a.png"  alt="">注意算法中第一个式子，即优化D的是ascending，因为要求最大化第一个式子，所以是加上梯度，而优化G的第二个式子就是一般的梯度下降，所以是减去梯度。</p>
<h1 id="一点想法"><a href="#一点想法" class="headerlink" title="一点想法"></a>一点想法</h1><ol>
<li><p>其实本文从数学角度很详细的论证了该算法的正确性以及收敛性，证明了在生成的样本和真实样本分布相同时，上述算法能收敛到最优，此时D(x)=$\frac{1}{2}$，由于目前数学功底还不够，只能读懂部分证明内容，剩下的留着以后深入学习后再进行进一步理解。</p>
</li>
<li><p>本文开创性的提出了一个新的思想，但没有给出具体的G网络和D网络的定义，文章中也指出虽然算法是可以收敛到嘴有点的，但是还取决于是否选取了合适的D和G。当然基于这个思想，已经有十分多的人提出了具体的D网络和G网络的实现并且有着很好的性能。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>论文</category>
        <category>2014年</category>
      </categories>
      <tags>
        <tag>论文</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
</search>
